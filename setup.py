#!/usr/bin/env python3
"""
Setup script for AI Candidate Ranking Agent

This script helps users set up their environment and verify all dependencies are installed.
"""

import os
import sys
import subprocess
import importlib.util


def check_python_version():
    """Check if Python version is compatible."""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("❌ Python 3.8+ is required. Current version:", sys.version)
        return False
    print(
        f"✅ Python {version.major}.{version.minor}.{version.micro} is compatible")
    return True


def check_package_installed(package_name):
    """Check if a package is installed."""
    spec = importlib.util.find_spec(package_name)
    return spec is not None


def install_requirements():
    """Install required packages."""
    print("🔧 Installing requirements...")
    try:
        subprocess.check_call(
            [sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("✅ Requirements installed successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"❌ Failed to install requirements: {e}")
        return False


def check_environment():
    """Check environment variables."""
    print("\n🔍 Checking environment configuration...")

    hf_token = os.getenv("HF_TOKEN")
    openai_key = os.getenv("OPENAI_API_KEY")
    anthropic_key = os.getenv("ANTHROPIC_API_KEY")

    if hf_token:
        print("✅ HuggingFace token found")
        return True
    elif openai_key:
        print("✅ OpenAI API key found")
        return True
    elif anthropic_key:
        print("✅ Anthropic API key found")
        return True
    else:
        print("⚠️  No API keys found in environment")
        print("   You can still use local models with Ollama")
        return False


def check_ollama():
    """Check if Ollama is available."""
    try:
        result = subprocess.run(
            ["ollama", "list"], capture_output=True, text=True)
        if result.returncode == 0:
            print("✅ Ollama is available")
            models = result.stdout.strip()
            if models:
                print(f"   Available models: {models}")
            return True
        else:
            print("⚠️  Ollama is installed but not running")
            print("   Run 'ollama serve' to start the server")
            return False
    except FileNotFoundError:
        print("⚠️  Ollama not found")
        print("   Install from: https://ollama.com/")
        return False


def create_env_file():
    """Create a .env file with user input."""
    print("\n🔧 Setting up environment file...")

    env_content = "# AI Candidate Ranking Agent - Environment Variables\n"
    env_content += "# Generated by setup.py\n\n"

    # Ask for HuggingFace token
    hf_token = input(
        "Enter your HuggingFace token (or press Enter to skip): ").strip()
    if hf_token:
        env_content += f"HF_TOKEN={hf_token}\n"

    # Ask for OpenAI key
    openai_key = input(
        "Enter your OpenAI API key (or press Enter to skip): ").strip()
    if openai_key:
        env_content += f"OPENAI_API_KEY={openai_key}\n"

    # Ask for Anthropic key
    anthropic_key = input(
        "Enter your Anthropic API key (or press Enter to skip): ").strip()
    if anthropic_key:
        env_content += f"ANTHROPIC_API_KEY={anthropic_key}\n"

    if hf_token or openai_key or anthropic_key:
        try:
            with open(".env", "w") as f:
                f.write(env_content)
            print("✅ .env file created successfully")
            return True
        except Exception as e:
            print(f"❌ Failed to create .env file: {e}")
            return False
    else:
        print("⚠️  No API keys provided. You can use local models with Ollama.")
        return False


def test_basic_functionality():
    """Test basic functionality."""
    print("\n🧪 Testing basic functionality...")

    try:
        from candidate_data import CANDIDATES, SAMPLE_JOB_DESCRIPTIONS
        print(
            f"✅ Loaded {len(CANDIDATES)} candidates and {len(SAMPLE_JOB_DESCRIPTIONS)} job descriptions")

        from candidate_ranking_tool import ranker
        print("✅ Candidate ranking tool imported successfully")

        # Test ranking
        job = SAMPLE_JOB_DESCRIPTIONS[0]
        results = ranker.rank_candidates(job)
        print(f"✅ Successfully ranked candidates for '{job['title']}'")

        return True
    except Exception as e:
        print(f"❌ Basic functionality test failed: {e}")
        return False


def print_next_steps():
    """Print next steps for the user."""
    print("\n" + "="*60)
    print("🚀 SETUP COMPLETE!")
    print("="*60)
    print("\n📋 Next steps:")
    print("1. Run the agent: python main.py")
    print("2. Try some example queries:")
    print("   - 'Give me the 3 best fit candidates for job 1'")
    print("   - 'Show me all available jobs'")
    print("   - 'Find candidates with Python skills'")
    print("\n💡 Tips:")
    print("- Use 'quit' or 'exit' to end the interactive session")
    print("- You can also run single queries: python main.py 'your query here'")
    print("- Check the README.md for more detailed usage instructions")
    print("\n" + "="*60)


def main():
    """Main setup function."""
    print("🚀 AI Candidate Ranking Agent Setup")
    print("="*60)

    # Check Python version
    if not check_python_version():
        sys.exit(1)

    # Check if requirements are installed
    required_packages = ["smolagents", "python-dotenv", "pandas", "numpy"]
    missing_packages = [
        pkg for pkg in required_packages if not check_package_installed(pkg)]

    if missing_packages:
        print(f"⚠️  Missing packages: {', '.join(missing_packages)}")
        if input("Install missing packages? (y/n): ").lower() == 'y':
            if not install_requirements():
                sys.exit(1)
        else:
            print("❌ Setup cancelled. Please install requirements manually.")
            sys.exit(1)
    else:
        print("✅ All required packages are installed")

    # Check environment
    has_api_keys = check_environment()
    has_ollama = check_ollama()

    if not has_api_keys and not has_ollama:
        print("\n⚠️  No API keys or local models found.")
        print("You need at least one of the following:")
        print("1. API keys (HuggingFace, OpenAI, Anthropic)")
        print("2. Local Ollama installation")

        if input("\nWould you like to set up API keys now? (y/n): ").lower() == 'y':
            create_env_file()
        else:
            print("\n💡 To use local models:")
            print("1. Install Ollama: https://ollama.com/")
            print("2. Pull a model: ollama pull llama3.2")
            print("3. Start server: ollama serve")

    # Test basic functionality
    if test_basic_functionality():
        print_next_steps()
    else:
        print("\n❌ Setup verification failed. Please check the error messages above.")
        sys.exit(1)


if __name__ == "__main__":
    main()
